cpu 연산처리
rem 휘발성 임시저장공간

자바의 장점

1. 간결하고 직관적이다.
2. 객체지향 언어
3. 여러 운영체제나 하드웨어에서 동일하게 실행 ==>플랫폼에 독립적
4. 오픈소스 프레임워크가 많다 ==> 생산성 증가, 유지보수 비용 절감

단점
1. 처리속도가 느리다 어플리케이션에는 적합x
2. 하드웨어에 연결하여 제어할 수 없다. ==> 가상머신을 사용하기 때문


주석 : 프로그램 코드 내에 삽입된 사용자의 메모를 의미
==> 코드실행 결과에는 아무런 영향을 끼치지않음.

쓰는 이유 1. 개발을 하다보면 코드 섹션(함수의 몸체)에 대한 설명이 필요함
	2. 협업할 때, 다른 개발자와의 의사소통에 필요








java의 기본구조

public class test{		// 클래스영역 -  객체 지향 코드 구현 단위
public class ch01 : 	1. 하나의 public 클래스로 시작
		2. 클래스는 파일 이름과 동일해야 함
		3. 그 내부에 main 메서드가 포함되어야 함}

public static void main(String[] args) {		//메서드 영역 - 절차 지향 구현 단위, main메서드의 선언부
## 메서드의 정의와 종류 ##
0. 메서드(기능) : 특정 기능 수행, C언어의 함수개념과 유사
1. 메인메서드 : 최최 실행 되는 함수
2. 라이브러리 메서드 : 개발편의를 위해서 미리 만들어져 제공되는 함수
3. 사용자 정의 메서드 : 개발자가 정의한(만든) 함수

0. main 메서드 : 프로그램의 진입접(entry point), 자바 가상 머신 (java virtual machine)은 이 메서드를 찾아 실행
1. public : main 메서드는 어디서든 접근할 수 있도록 public으로 선언해야함.
2. static : main 메서드는 객체의 생성 없이 호출될 수 있도록 static으로 선언되어야 함.
3. void : main 메서드는 어떤 값을 반환하지 않도록 void로 선언되어야 함.
4. String[] args : main 메서드는 문자열 배열을 매개변수로 받음.
	         이 배열은 프로그램 실행시에 명령행 인수(arguments)를 전달하기 위한 것 
5. 중괄호{} : 내부에 프로그램 실행 시 실행될 코드 작성 --> 프로그램의 로직 구성

System.out.println('HELLO WORLD");		출력함수(메서드) 실행, call 이라고 함.
					';' : 코드의 마침표 역할
					모니터에 우리가 작성한 텍스트를 console창에 출력하는 역할(기능)
}